<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSMTC Blog</title><link>//localhost:1313/</link><description>Recent content on CSMTC Blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 12 Mar 2025 00:38:38 +0000</lastBuildDate><atom:link href="//localhost:1313/rss.xml" rel="self" type="application/rss+xml"/><item><title>My First Post</title><link>//localhost:1313/post/my-first-post/</link><pubDate>Tue, 11 Mar 2025 23:51:38 +0800</pubDate><guid>//localhost:1313/post/my-first-post/</guid><description>&lt;p>尝试使用Hugo进行博客创作吧~&lt;/p>
&lt;p>$\alpha$&lt;/p>
&lt;p>$$
x = sin(y)
$$&lt;/p></description></item><item><title>LeetCode刷题记录-贪心</title><link>//localhost:1313/post/work/%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/%E9%A2%98%E7%9B%AE/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E8%B4%AA%E5%BF%83/</link><pubDate>Thu, 25 Jul 2024 17:13:03 +0000</pubDate><guid>//localhost:1313/post/work/%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/%E9%A2%98%E7%9B%AE/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E8%B4%AA%E5%BF%83/</guid><description>&lt;h3 id="55-跳跃游戏">
&lt;a href="https://leetcode.cn/problems/jump-game/description/" title="55. 跳跃游戏" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 55. 跳跃游戏
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
&lt;a class="header-anchor" href="#55-%e8%b7%b3%e8%b7%83%e6%b8%b8%e6%88%8f">&lt;/a>
&lt;/h3>&lt;p>给你一个非负整数数组 &lt;code>nums&lt;/code> ，你最初位于数组的 &lt;strong>第一个下标&lt;/strong> 。数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个下标，如果可以，返回 &lt;code>true&lt;/code> ；否则，返回 &lt;code>false&lt;/code> 。&lt;/p>
&lt;p>核心策略：看覆盖范围，覆盖范围内⼀定是可以跳过来的，不⽤管是怎么跳的。问题就转化为跳跃覆盖范围究竟可不可以覆盖到终点。&lt;/p>
&lt;h3 id="45-跳跃游戏-ii">
&lt;a href="https://leetcode.cn/problems/jump-game-ii/description" title="45. 跳跃游戏 II" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 45. 跳跃游戏 II
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
&lt;a class="header-anchor" href="#45-%e8%b7%b3%e8%b7%83%e6%b8%b8%e6%88%8f-ii">&lt;/a>
&lt;/h3>&lt;p>给定一个长度为 &lt;code>n&lt;/code> 的 &lt;strong>0 索引&lt;/strong>整数数组 &lt;code>nums&lt;/code>。初始位置为 &lt;code>nums[0]&lt;/code>。&lt;/p>
&lt;p>每个元素 &lt;code>nums[i]&lt;/code> 表示从索引 &lt;code>i&lt;/code> 向前跳转的最大长度。换句话说，如果你在 &lt;code>nums[i]&lt;/code> 处，你可以跳转到任意 &lt;code>nums[i + j]&lt;/code> 处:&lt;/p>
&lt;ul>
&lt;li>&lt;code>0 &amp;lt;= j &amp;lt;= nums[i]&lt;/code> &lt;/li>
&lt;li>&lt;code>i + j &amp;lt; n&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>返回到达 &lt;code>nums[n - 1]&lt;/code> 的最小跳跃次数。生成的测试用例保证可以到达 &lt;code>nums[n - 1]&lt;/code> 。&lt;/p>
&lt;p>核心策略：同样看覆盖范围，当前下标达到了上次跳跃的最大位置，且未达到终点，则需要跳跃一次。&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-10">&lt;a class="lnlinks" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-11">&lt;a class="lnlinks" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-12">&lt;a class="lnlinks" href="#hl-0-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-13">&lt;a class="lnlinks" href="#hl-0-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-14">&lt;a class="lnlinks" href="#hl-0-14">14&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-C++" data-lang="C++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">nums&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">max_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">last_max_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cnt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 跳跃的情况：当前下标达到了上次跳跃的最大位置，且未达到终点，则需要跳跃一次
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">max_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">max_pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">nums&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">last_max_pos&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">cnt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">last_max_pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">max_pos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">last_max_pos&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;h3 id="134-加油站">
&lt;a href="https://leetcode.cn/problems/gas-station/" title="134. 加油站" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 134. 加油站
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
&lt;a class="header-anchor" href="#134-%e5%8a%a0%e6%b2%b9%e7%ab%99">&lt;/a>
&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-1-1">&lt;a class="lnlinks" href="#hl-1-1">1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-2">&lt;a class="lnlinks" href="#hl-1-2">2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-1-3">&lt;a class="lnlinks" href="#hl-1-3">3&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">情况⼀：如果 gas 的总和⼩于 cost 总和，那么⽆论从哪⾥出发，⼀定是跑不了⼀圈的
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">情况⼆：rest[i] = gas[i]-cost[i]为⼀天剩下的油，i 从 0 开始计算累加到最后⼀站，如果累加没有出现负数，说明从 0 出发，油就没有断过，那么 0 就是起点。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">情况三：如果累加的最⼩值是负数，汽⻋就要从⾮0 节点出发，从后向前，看哪个节点能把这个负数填平，能把这个负数填平的节点就是出发节点。&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;h3 id="376-摆动序列">
&lt;a href="https://leetcode.cn/problems/wiggle-subsequence/" title="376. 摆动序列" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 376. 摆动序列
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
&lt;a class="header-anchor" href="#376-%e6%91%86%e5%8a%a8%e5%ba%8f%e5%88%97">&lt;/a>
&lt;/h3>&lt;p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。&lt;/p></description></item><item><title>LeetCode刷题记录-动态规划</title><link>//localhost:1313/post/work/%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/%E9%A2%98%E7%9B%AE/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link><pubDate>Sat, 17 Feb 2024 16:50:13 +0000</pubDate><guid>//localhost:1313/post/work/%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90/%E9%A2%98%E7%9B%AE/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid><description>&lt;h1 id="动态规划问题">动态规划问题
&lt;a class="header-anchor" href="#%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92%e9%97%ae%e9%a2%98">&lt;/a>
&lt;/h1>&lt;p>这类问题的求解思路是：&lt;/p>
&lt;ul>
&lt;li>先尝试有 Cache 的暴力搜索，列出递推式&lt;/li>
&lt;li>将上述搜索转化为使用 dp 数组的方法&lt;/li>
&lt;/ul>
&lt;h3 id="70-爬楼梯">
&lt;a href="https://leetcode.cn/problems/climbing-stairs/description/" title="70. 爬楼梯" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 70. 爬楼梯
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
&lt;a class="header-anchor" href="#70-%e7%88%ac%e6%a5%bc%e6%a2%af">&lt;/a>
&lt;/h3>&lt;p>假设你正在爬楼梯。需要 &lt;code>n&lt;/code> 阶你才能到达楼顶。
每次你可以爬 &lt;code>1&lt;/code> 或 &lt;code>2&lt;/code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？&lt;/p>
&lt;p>$$
\begin{cases}
f(n)=f(n-2)+f(n-1)\
f(&amp;lt;=0)=0,f(1)=1,f(2)=2
\end{cases}
$$&lt;/p>
&lt;h3 id="746-使用最小花费爬楼梯">
&lt;a href="https://leetcode.cn/problems/min-cost-climbing-stairs/" title="746. 使用最小花费爬楼梯" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 746. 使用最小花费爬楼梯
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
&lt;a class="header-anchor" href="#746-%e4%bd%bf%e7%94%a8%e6%9c%80%e5%b0%8f%e8%8a%b1%e8%b4%b9%e7%88%ac%e6%a5%bc%e6%a2%af">&lt;/a>
&lt;/h3>&lt;p>给你一个整数数组 &lt;code>cost&lt;/code> ，其中 &lt;code>cost[i]&lt;/code> 是从楼梯第 &lt;code>i&lt;/code> 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。
你可以选择从下标为 &lt;code>0&lt;/code> 或下标为 &lt;code>1&lt;/code> 的台阶开始爬楼梯。
输入：cost = [10,15,20]
输出：15
解释：你将从下标为 1 的台阶开始。&lt;/p>
&lt;ul>
&lt;li>支付 15 ，向上爬两个台阶，到达楼梯顶部。
总花费为 15 。&lt;/li>
&lt;/ul>
&lt;h3 id="62-不同路径">
&lt;a href="https://leetcode.cn/problems/unique-paths/" title="62. 不同路径" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 62. 不同路径
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>
&lt;a class="header-anchor" href="#62-%e4%b8%8d%e5%90%8c%e8%b7%af%e5%be%84">&lt;/a>
&lt;/h3>&lt;p>一个机器人位于一个 &lt;code>m x n&lt;/code> 网格的左上角 （起始点在下图中标记为 “Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
问总共有多少条不同的路径？&lt;/p></description></item></channel></rss>